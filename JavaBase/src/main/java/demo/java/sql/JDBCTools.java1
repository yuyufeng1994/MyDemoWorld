package demo.java.sql;

import com.alibaba.druid.pool.DruidDataSource;
import com.alibaba.druid.pool.DruidDataSourceFactory;

import javax.sql.DataSource;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Properties;

/*
 * 操作JDBC的工具类，其中封装了一些工具方法
 * Version1.0
 */
public class JDBCTools {
	/**
	 * 处理事务
	 */

	// 提交事务
	public static void commit(Connection connection) {
		if (connection != null) {
			try {
				connection.commit();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	// 回滚事务
	public static void rollback(Connection connection) {
		if (connection != null) {
			try {
				connection.rollback();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	// 开始事务
	public static void beginTx(Connection connection) {
		if (connection != null) {
			try {
				connection.setAutoCommit(false);
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
	}

	public static void releaseSource(ResultSet rs, Statement statement, Connection conn) {
		if (rs != null) {
			try {
				rs.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		if (statement != null) {
			try {
				statement.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		if (conn != null) {
			try {
				conn.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	/**
	 * 关闭statement 和 connection
	 * 
	 * @param statement
	 * @param conn
	 */
	public static void releaseSource(Statement statement, Connection conn) {
		if (statement != null) {
			try {
				statement.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		if (conn != null) {
			try {
				// 数据库连接池的Connection对象进行close时
				// 并不是真的进行关闭，而是把数据库连接归还的数据库连接池中
				conn.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	private static DataSource dataSource = null;
	private static DruidDataSource dds = null;
	// 数据库连接池应只被初始化一次
	static {
		Properties pro = new Properties();
		FileInputStream in = null;
		try {
			in = new FileInputStream(JDBCTools.class.getResource("/jdbc/jdbc.properties").getFile());
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} finally {
			try {
				pro.load(in);
			} catch (IOException e) {
				e.printStackTrace();
			}
			try {
				in.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		}
		try {
			DruidDataSource dds = (DruidDataSource) DruidDataSourceFactory.createDataSource(pro);
//			dataSource = dds.getDataSourceStat();
		} catch (Exception e) {
			e.printStackTrace();
		}
		

	}

	public static Connection getConnection() throws SQLException {
		return dataSource.getConnection();
	}

}
